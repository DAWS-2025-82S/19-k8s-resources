apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: expense
  name: sa-secret-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["*"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: sa-secret-reader
  namespace: expense
subjects:
# You can specify more than one "subject"
- kind: ServiceAccount
  name: expense-mysql-secret # "name" is case sensitive
  namespace: expense
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: sa-secret-reader # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---
kind: Pod
apiVersion: v1
metadata:
  name: sa-demo-2
  namespace: expense
spec:
  # one pod can contain multiple containers
  serviceAccount: expense-mysql-secret
  initContainers:
  - name: awscli
    image: amazon/aws-cli
    command:  ['sh', '-c', 'aws secretsmanager get-secret-value --secret-id expense/mysql/creds --query SecretString --output text > /secrets/.env ']
    volumeMounts:
    - mountPath: /secrets
      name: secret-volume
  containers:
  - name: nginx
    image: nginx
    volumeMounts:
    - mountPath: /secrets
      name: secret-volume
  volumes:
  - name: secret-volume
    emptyDir: {}


# To check the pods/secrets access running in default namespace from the pod in expense namespace 
# after connecting to sa-demo pod created using 19-sa.yaml
# -------------------------------------------------------------------------------------------------
# kubectl exec -it sa-demo-2 -n expense -- bash
# Install kubectl
# kubectl get secrets

# you will get permission error, to access this again we need to use sa with role and rolebinding
# exit the pod

# Not only to users, role and rolebinding can be created for ServiceAccount also

# kubectl get sa expense-mysql-secret -n expense -o yaml

# Add role and role binding with Kind as ServiceAccount in 21-sa.yaml
# kubectl apply -f 21-sa.yaml
# kubectl exec -it sa-demo-2 -n expense -- bash
# Install kubectl
# kubectl get secrets